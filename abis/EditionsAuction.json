{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "editionContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "AuctionApprovalUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "editionContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "numberOfPriceDrops",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "curator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "curatorRoyaltyBPS",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "auctionCurrency",
          "type": "address"
        }
      ],
      "name": "AuctionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "EditionPurchased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "auctions",
      "outputs": [
        {
          "internalType": "address",
          "name": "editionContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "numberOfPriceDrops",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "stepPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "stepTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "curator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "curatorRoyaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auctionCurrency",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "editionContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "numberOfPriceDrops",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "curator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "curatorRoyaltyBPS",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "auctionCurrency",
          "type": "address"
        }
      ],
      "name": "createAuction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "getSalePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        }
      ],
      "name": "numberCanMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "auctionId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setAuctionApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xefd234df67c724e21b1551bc05fc3e3d7ed5a4f846838179e46da5d00447024e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "2000225",
    "logsBloom": "0x
    "blockHash": "0x9e695308e46710a7b81fdfa2f3a7a6904e3e37973b50b4495da22bd6210e3d87",
    "transactionHash": "0xefd234df67c724e21b1551bc05fc3e3d7ed5a4f846838179e46da5d00447024e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0xefd234df67c724e21b1551bc05fc3e3d7ed5a4f846838179e46da5d00447024e",
        "address": "0xd8058efe0198ae9dD7D563e1b4938Dcbc86A1F81",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cf7ed3acca5a467e9e704c703e8d87f634fb0fc9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9e695308e46710a7b81fdfa2f3a7a6904e3e37973b50b4495da22bd6210e3d87"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "2000225",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bf496a8226594eb64d414075da310022",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"editionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"AuctionApprovalUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"editionContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"numberOfPriceDrops\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curatorRoyaltyBPS\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"auctionCurrency\",\"type\":\"address\"}],\"name\":\"AuctionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"EditionPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"auctions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"editionContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numberOfPriceDrops\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stepPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stepTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"curatorRoyaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionCurrency\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"editionContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"numberOfPriceDrops\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"curator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"curatorRoyaltyBPS\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"auctionCurrency\",\"type\":\"address\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"getSalePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"numberCanMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setAuctionApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createAuction(address,uint256,uint256,uint256,uint256,uint8,address,uint256,address)\":{\"details\":\"Store the auction details in the auctions mapping and emit an AuctionCreated event. If there is no curator, or if the curator is the auction creator, automatically approve the auction and emit an AuctionApproved event.\",\"params\":{\"curator\":\"the address of the allocated curator\",\"curatorRoyaltyBPS\":\"the royalty the curator will recieve per purchase in basis points\",\"duration\":\"the duration the auction will run for\",\"editionContract\":\"the contract of which NFT's will be minted\",\"endPrice\":\"the price in eth the auction will end at\",\"numberOfPriceDrops\":\"the number of times the price will drop between starting and ending price\",\"startPrice\":\"the price in eth the auction will start at\",\"startTimestamp\":\"the time the auction will start\"},\"returns\":{\"_0\":\"auction id\"}},\"getSalePrice(uint256)\":{\"details\":\"calculates the price based on the block.timestamp\",\"params\":{\"auctionId\":\"the id of the auction\"},\"returns\":{\"_0\":\"price in wei\"}},\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"purchase(uint256,uint256)\":{\"details\":\"mints an NFT and splits purchase fee between creator and curator\",\"params\":{\"auctionId\":\"the id of the auction\"},\"returns\":{\"_0\":\"the id of the NFT\"}},\"setAuctionApproval(uint256,bool)\":{\"details\":\"sets auction approved to approval and emits an AuctionApprovalUpdated event\",\"params\":{\"approved\":\"the curators approval decision\",\"auctionId\":\"the id of the auction\"}},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"Whose payments will be withdrawn.\"}}},\"title\":\"An open dutch auction house, for initial drops of limited edition nft contracts.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"createAuction(address,uint256,uint256,uint256,uint256,uint8,address,uint256,address)\":{\"notice\":\"Create an auction.\"},\"getSalePrice(uint256)\":{\"notice\":\"gets the current sale price of an auction\"},\"purchase(uint256,uint256)\":{\"notice\":\"Purchases an NFT\"},\"setAuctionApproval(uint256,bool)\":{\"notice\":\"allows curator to approve auction\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EditionsAuction.sol\":\"EditionsAuction\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/PullPayment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/PullPayment.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/escrow/Escrow.sol\\\";\\n\\n/**\\n * @dev Simple implementation of a\\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\\n * strategy, where the paying contract doesn't interact directly with the\\n * receiver account, which must withdraw its payments itself.\\n *\\n * Pull-payments are often considered the best practice when it comes to sending\\n * Ether, security-wise. It prevents recipients from blocking execution, and\\n * eliminates reentrancy concerns.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n *\\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\\n * instead of Solidity's `transfer` function. Payees can query their due\\n * payments with {payments}, and retrieve them with {withdrawPayments}.\\n */\\nabstract contract PullPayment {\\n    Escrow private immutable _escrow;\\n\\n    constructor() {\\n        _escrow = new Escrow();\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\\n     *\\n     * Note that _any_ account can call this function, not just the `payee`.\\n     * This means that contracts unaware of the `PullPayment` protocol can still\\n     * receive funds this way, by having a separate account call\\n     * {withdrawPayments}.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee Whose payments will be withdrawn.\\n     */\\n    function withdrawPayments(address payable payee) public virtual {\\n        _escrow.withdraw(payee);\\n    }\\n\\n    /**\\n     * @dev Returns the payments owed to an address.\\n     * @param dest The creditor's address.\\n     */\\n    function payments(address dest) public view returns (uint256) {\\n        return _escrow.depositsOf(dest);\\n    }\\n\\n    /**\\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\\n     * there is no danger of them being spent before withdrawal.\\n     *\\n     * @param dest The destination address of the funds.\\n     * @param amount The amount to transfer.\\n     */\\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\\n        _escrow.deposit{value: amount}(dest);\\n    }\\n}\\n\",\"keccak256\":\"0xbb286f865aa7ae537a147695baf219277a823e06f6d2008e9d2aaa6f6686aa95\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/escrow/Escrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/escrow/Escrow.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../access/Ownable.sol\\\";\\nimport \\\"../Address.sol\\\";\\n\\n/**\\n * @title Escrow\\n * @dev Base escrow contract, holds funds designated for a payee until they\\n * withdraw them.\\n *\\n * Intended usage: This contract (and derived escrow contracts) should be a\\n * standalone contract, that only interacts with the contract that instantiated\\n * it. That way, it is guaranteed that all Ether will be handled according to\\n * the `Escrow` rules, and there is no need to check for payable functions or\\n * transfers in the inheritance tree. The contract that uses the escrow as its\\n * payment method should be its owner, and provide public methods redirecting\\n * to the escrow's deposit and withdraw.\\n */\\ncontract Escrow is Ownable {\\n    using Address for address payable;\\n\\n    event Deposited(address indexed payee, uint256 weiAmount);\\n    event Withdrawn(address indexed payee, uint256 weiAmount);\\n\\n    mapping(address => uint256) private _deposits;\\n\\n    function depositsOf(address payee) public view returns (uint256) {\\n        return _deposits[payee];\\n    }\\n\\n    /**\\n     * @dev Stores the sent amount as credit to be withdrawn.\\n     * @param payee The destination address of the funds.\\n     */\\n    function deposit(address payee) public payable virtual onlyOwner {\\n        uint256 amount = msg.value;\\n        _deposits[payee] += amount;\\n        emit Deposited(payee, amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw accumulated balance for a payee, forwarding all gas to the\\n     * recipient.\\n     *\\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\\n     * Make sure you trust the recipient, or are either following the\\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\\n     *\\n     * @param payee The address whose funds will be withdrawn and transferred to.\\n     */\\n    function withdraw(address payable payee) public virtual onlyOwner {\\n        uint256 payment = _deposits[payee];\\n\\n        _deposits[payee] = 0;\\n\\n        payee.sendValue(payment);\\n\\n        emit Withdrawn(payee, payment);\\n    }\\n}\\n\",\"keccak256\":\"0x10a40dfab727e06bb3472d1bc9ccf145a604b0c9889d5c7a2eff64d72348eb21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.6;\\n\\ninterface IEditionSingleMintable {\\n  function mintEdition(address to) external returns (uint256);\\n  function mintEditions(address[] memory to) external returns (uint256);\\n  function numberCanMint() external view returns (uint256);\\n  function owner() external view returns (address);\\n}\",\"keccak256\":\"0x04b73ddff10e4feb9297834b5550faecb1e63bfc8c4a513ecdf25796c49360db\",\"license\":\"GPL-3.0\"},\"contracts/EditionsAuction.sol\":{\"content\":\"// Sketch of dutch auction drop mechanic for Zora NFT editions\\n// WIP do not use!\\n\\n// TODO: rentrence checks (see auction house contract)\\n// TODO: documentation\\n\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {PullPayment} from \\\"@openzeppelin/contracts/security/PullPayment.sol\\\";\\nimport {Counters} from \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IEditionSingleMintable} from \\\"@zoralabs/nft-editions-contracts/contracts/IEditionSingleMintable.sol\\\";\\nimport {IEditionsAuction} from \\\"./IEditionsAuction.sol\\\";\\n\\n/**\\n * @title An open dutch auction house, for initial drops of limited edition nft contracts.\\n */\\ncontract EditionsAuction is IEditionsAuction, ReentrancyGuard, PullPayment {\\n  using SafeMath for uint256;\\n  using Counters for Counters.Counter;\\n  using SafeERC20 for IERC20;\\n\\n  // minimum time interval before price can drop in seconds\\n  uint8 minStepTime;\\n\\n  // TODO: should we check for EditionSingleMintable interface id?\\n  /*\\n    NOTE: As this contract is only ment for EditionSingleMintable type of NFT contract\\n    used the function below to get: 0x2fc51e5a\\n    but EditionSingleMintable contract supportsInterface does not return true\\n   */\\n  // function getEditionContractInterfaceId () external view returns (bytes4)  {\\n  //   return type(IEditionSingleMintable).interfaceId;\\n  // }\\n\\n  bytes4 constant ERC721_interfaceId = 0x80ac58cd; // ERC-721 interface\\n  bytes4 constant singleEditionMintable_interfaceId = 0x2fc51e5a;\\n\\n  // A mapping of all the auctions currently running\\n  mapping (uint256 => IEditionsAuction.Auction) public auctions;\\n\\n  Counters.Counter private _auctionIdTracker;\\n\\n  /**\\n   * @notice Require that the specified auction exists\\n   */\\n  modifier auctionExists(uint256 auctionId) {\\n    require(_exists(auctionId), \\\"Auction doesn't exist\\\");\\n    _;\\n  }\\n\\n\\n  /**\\n   * Constructor\\n   */\\n  constructor() {\\n    minStepTime = 2 * 60; // 2 minutes\\n  }\\n\\n  /**\\n   * @notice Create an auction.\\n   * @dev Store the auction details in the auctions mapping and emit an AuctionCreated event.\\n   * If there is no curator, or if the curator is the auction creator,\\n   * automatically approve the auction and emit an AuctionApproved event.\\n   * @param editionContract the contract of which NFT's will be minted\\n   * @param startTimestamp the time the auction will start\\n   * @param duration the duration the auction will run for\\n   * @param startPrice the price in eth the auction will start at\\n   * @param endPrice the price in eth the auction will end at\\n   * @param numberOfPriceDrops the number of times the price will drop between starting and ending price\\n   * @param curator the address of the allocated curator\\n   * @param curatorRoyaltyBPS the royalty the curator will recieve per purchase in basis points\\n   * @return auction id\\n   */\\n  function createAuction(\\n    address editionContract,\\n    uint256 startTimestamp,\\n    uint256 duration,\\n    uint256 startPrice,\\n    uint256 endPrice,\\n    uint8 numberOfPriceDrops,\\n    address curator,\\n    uint256 curatorRoyaltyBPS,\\n    address auctionCurrency\\n  ) external override nonReentrant returns (uint256) {\\n    require(\\n      IERC165(editionContract).supportsInterface(ERC721_interfaceId),\\n      \\\"Doesn't support NFT interface\\\"\\n    );\\n\\n    require(\\n      IERC165(editionContract).supportsInterface(singleEditionMintable_interfaceId),\\n      \\\"Doesn't support Zora NFT Editions interface\\\"\\n    );\\n\\n    // TODO: require(IEditionSingleMintable(editionContract).numberCanMint() != type(uint256).max, \\\"Editions must be a limited number\\\")\\n    // TODO: require this contract is approved ??\\n    // TODO: require curator rolaty not too high\\n\\n    address creator = IEditionSingleMintable(editionContract).owner();\\n    require(msg.sender == creator, \\\"Caller must be creator of editions\\\");\\n    require(startPrice > endPrice, \\\"Start price must be higher then end price\\\");\\n    if(curator == address(0)){\\n      require(curatorRoyaltyBPS == 0, \\\"Royalties would be sent into the void\\\");\\n    }\\n\\n    // NOTE: calc with function to get past CompilerError: Stack too deep,\\n    Step memory step = _calcStep(\\n      duration,\\n      startPrice,\\n      endPrice,\\n      numberOfPriceDrops\\n    );\\n\\n    require(step.time >= minStepTime, \\\"Step time must be higher than minimuim step time\\\");\\n\\n    uint256 auctionId = _auctionIdTracker.current();\\n\\n    auctions[auctionId] = Auction({\\n      editionContract: editionContract,\\n      startTimestamp: startTimestamp,\\n      duration: duration,\\n      startPrice: startPrice,\\n      endPrice: endPrice,\\n      numberOfPriceDrops: numberOfPriceDrops,\\n      creator: creator,\\n      stepPrice: step.price,\\n      stepTime: step.time,\\n      approved: false,\\n      curator: curator,\\n      curatorRoyaltyBPS: curatorRoyaltyBPS,\\n      auctionCurrency: auctionCurrency\\n    });\\n\\n    _auctionIdTracker.increment();\\n\\n    emit AuctionCreated(\\n      auctionId,\\n      creator,\\n      editionContract,\\n      startTimestamp,\\n      duration,\\n      startPrice,\\n      endPrice,\\n      numberOfPriceDrops,\\n      curator,\\n      curatorRoyaltyBPS,\\n      auctionCurrency\\n    );\\n\\n    // auto approve auction\\n    if(curator == address(0) || curator == creator){\\n      _approveAuction(auctionId, true);\\n    }\\n\\n    return auctionId;\\n  }\\n\\n  struct Step {\\n    uint256 price;\\n    uint256 time;\\n  }\\n\\n  function _calcStep (\\n    uint256 duration,\\n    uint256 startPrice,\\n    uint256 endPrice,\\n    uint8 numberOfPriceDrops\\n  ) internal pure returns (Step memory) {\\n\\n    Step memory step;\\n\\n    step.price = startPrice.sub(endPrice).div(numberOfPriceDrops);\\n    step.time = duration.div(numberOfPriceDrops);\\n\\n    return step;\\n  }\\n\\n  /**\\n   * @notice Purchases an NFT\\n   * @dev mints an NFT and splits purchase fee between creator and curator\\n   * @param auctionId the id of the auction\\n   * @return the id of the NFT\\n   */\\n  function purchase(uint256 auctionId, uint256 amount) external payable override auctionExists(auctionId) returns (uint256){\\n    require(auctions[auctionId].approved, \\\"Auction has not been approved\\\");\\n    require(block.timestamp >= auctions[auctionId].startTimestamp, \\\"Auction has not started yet\\\");\\n    require( _numberCanMint(auctionId) != 0, \\\"Sold out\\\");\\n\\n    uint256 salePrice = _getSalePrice(auctionId);\\n    require(amount >= salePrice, \\\"Must be more or equal to sale price\\\");\\n\\n    address[] memory toMint = new address[](1);\\n    toMint[0] = msg.sender;\\n\\n    // if free carry out purchase\\n    if(salePrice == 0){\\n      emit EditionPurchased(\\n        auctionId,\\n        auctions[auctionId].editionContract,\\n        salePrice,\\n        msg.sender\\n      );\\n      return IEditionSingleMintable(auctions[auctionId].editionContract).mintEditions(toMint);\\n    }\\n\\n    IERC20 token = IERC20(auctions[auctionId].auctionCurrency);\\n\\n    // NOTE: msg.sender would need to approve this contract with currency before making a purchase\\n    // If intergrating with zora v3 the market would hold the funds and handle royalties differently.\\n    // through royalties finders, and protocal fees\\n    // TODO: respect royalties on NFT contract (v3 intergration could solve this)\\n\\n    // NOTE: modified from v3 for now. A full intergration would be better if we go that route\\n    // https://github.com/ourzora/v3/blob/main/contracts/common/IncomingTransferSupport/V1/IncomingTransferSupportV1.sol\\n\\n    // We must check the balance that was actually transferred to this contract,\\n    // as some tokens impose a transfer fee and would not actually transfer the\\n    // full amount to the market, resulting in potentally locked funds\\n    uint256 beforeBalance = token.balanceOf(address(this));\\n    token.safeTransferFrom(msg.sender, address(this), salePrice);\\n    uint256 afterBalance = token.balanceOf(address(this));\\n    require(beforeBalance + salePrice == afterBalance, \\\"_handleIncomingTransfer token transfer call did not transfer expected amount\\\");\\n\\n    // if no curator, add payment to creator\\n    if(auctions[auctionId].curator == address(0)){\\n      token.safeTransfer(\\n        auctions[auctionId].creator,\\n        salePrice\\n      );\\n    }\\n\\n    // else split payment between curator and creator\\n    else {\\n      uint256 curatorFee = (salePrice.mul(auctions[auctionId].curatorRoyaltyBPS)).div(10000);\\n      token.safeTransfer(\\n        auctions[auctionId].curator,\\n        curatorFee\\n      );\\n\\n      uint256 creatorFee = salePrice.sub(curatorFee);\\n      token.safeTransfer(\\n        auctions[auctionId].creator,\\n        creatorFee\\n      );\\n    }\\n\\n    emit EditionPurchased(\\n      auctionId,\\n      auctions[auctionId].editionContract,\\n      salePrice,\\n      msg.sender\\n    );\\n    return IEditionSingleMintable(auctions[auctionId].editionContract).mintEditions(toMint);\\n  }\\n\\n  function numberCanMint(uint256 auctionId) external view override returns (uint256) {\\n    return _numberCanMint(auctionId);\\n  }\\n\\n  /**\\n   * @notice allows curator to approve auction\\n   * @dev sets auction approved to approval and emits an AuctionApprovalUpdated event\\n   * @param auctionId the id of the auction\\n   * @param approved the curators approval decision\\n   */\\n  function setAuctionApproval(uint256 auctionId, bool approved) external override auctionExists(auctionId) {\\n    require(msg.sender == auctions[auctionId].curator, \\\"must be curator\\\");\\n    require(block.timestamp < auctions[auctionId].startTimestamp, \\\"Auction has already started\\\");\\n    // TODO: see if auction should be cancled/ended if approval is set to false?\\n    _approveAuction(auctionId, approved);\\n  }\\n\\n  /**\\n   * @notice gets the current sale price of an auction\\n   * @dev calculates the price based on the block.timestamp\\n   * @param auctionId the id of the auction\\n   * @return price in wei\\n   */\\n  function getSalePrice(uint256 auctionId) external view override returns (uint256) {\\n    return _getSalePrice(auctionId);\\n  }\\n\\n  function _numberCanMint(uint256 auctionId) internal view returns (uint256) {\\n    return IEditionSingleMintable(auctions[auctionId].editionContract).numberCanMint();\\n  }\\n\\n  function _exists(uint256 auctionId) internal view returns(bool) {\\n    return auctions[auctionId].creator != address(0);\\n  }\\n\\n  function _approveAuction(uint256 auctionId, bool approved) internal {\\n    auctions[auctionId].approved = approved;\\n    emit AuctionApprovalUpdated(auctionId, auctions[auctionId].editionContract, approved);\\n  }\\n\\n  function _getSalePrice(uint256 auctionId) internal view returns (uint256) {\\n    // return endPrice if auction is over\\n    if(block.timestamp > auctions[auctionId].startTimestamp.add(auctions[auctionId].duration)){\\n      return auctions[auctionId].endPrice;\\n    }\\n\\n    // return startPrice if auction hasn't started yet\\n    if(block.timestamp < auctions[auctionId].startTimestamp.add(auctions[auctionId].stepTime)){\\n      return auctions[auctionId].startPrice;\\n    }\\n\\n    // calculate price based of block.timestamp\\n    uint256 timeSinceStart = block.timestamp.sub(auctions[auctionId].startTimestamp);\\n    uint256 remainder = timeSinceStart.mod(auctions[auctionId].stepTime);\\n    uint256 dropNum = timeSinceStart.sub(remainder).div(auctions[auctionId].stepTime);\\n\\n    // transalte -1 so endPrice is after auction.duration\\n    return auctions[auctionId].startPrice.sub(auctions[auctionId].stepPrice.mul(dropNum - 1));\\n  }\\n  // TODO: endAuction end everything if sold out remove form auctions mapping?\\n}\",\"keccak256\":\"0x44a8167e4ad1529f356f491a8e1e4d9e9e839e0b027ed47aa895eef35ec20567\",\"license\":\"GPL-3.0\"},\"contracts/IEditionsAuction.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.6;\\n\\ninterface IEditionsAuction {\\n  struct Auction {\\n    address editionContract;\\n    uint256 startTimestamp;\\n    uint256 duration;\\n    uint256 startPrice;\\n    uint256 endPrice;\\n    uint8 numberOfPriceDrops;\\n    address creator;\\n    uint256 stepPrice;\\n    uint256 stepTime;\\n    bool approved;\\n    address curator;\\n    uint256 curatorRoyaltyBPS;\\n    address auctionCurrency;\\n  }\\n\\n  event EditionPurchased(\\n    uint256 auctionId,\\n    address tokenContract,\\n    uint256 price,\\n    address owner\\n  );\\n\\n  event AuctionCreated(\\n    uint256 auctionId,\\n    address creator,\\n    address editionContract,\\n    uint256 startTimestamp,\\n    uint256 duration,\\n    uint256 startPrice,\\n    uint256 endPrice,\\n    uint8 numberOfPriceDrops,\\n    address curator,\\n    uint256 curatorRoyaltyBPS,\\n    address auctionCurrency\\n  );\\n\\n  event AuctionApprovalUpdated(\\n    uint256 auctionId,\\n    address editionContract,\\n    bool approved\\n  );\\n\\n  function createAuction(\\n    address editionContract,\\n    uint256 startTimestamp,\\n    uint256 duration,\\n    uint256 startPrice,\\n    uint256 endPrice,\\n    uint8 numberOfPriceDrops,\\n    address curator,\\n    uint256 curatorRoyaltyBPS,\\n    address auctionCurrency\\n  ) external returns (uint256);\\n\\n  function setAuctionApproval(uint auctionId, bool approved) external;\\n\\n  function getSalePrice(uint256 auctionId) external returns (uint256);\\n\\n  function purchase(uint256 auctionId, uint256 amount) external payable returns (uint256);\\n\\n  function numberCanMint(uint256 auctionId) external view returns (uint256);\\n}\",\"keccak256\":\"0x04d286414889507296279e7a85fc51a515c390aeab747b190a23aead22f44e37\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50600160005560405161002290610063565b604051809103906000f08015801561003e573d6000803e3d6000fd5b5060601b6001600160601b03191660805260018054607860ff19909116179055610070565b61061a80611c5683390190565b60805160601c611bc16100956000396000818161021c01526111420152611bc16000f3fe60806040526004361061006b5760003560e01c806331b3eb941461007057806355e91d1614610092578063571a26a0146100c557806370876c9814610172578063973ddb4a14610185578063d9a17be2146101a5578063e2982c21146101c5578063f8eb5fc5146101e5575b600080fd5b34801561007c57600080fd5b5061009061008b366004611768565b610205565b005b34801561009e57600080fd5b506100b26100ad366004611854565b610286565b6040519081526020015b60405180910390f35b3480156100d157600080fd5b506101596100e0366004611854565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600787015460088801546009890154600a909901546001600160a01b039889169a9997989697959660ff808716976101009788900483169791851694919091048216929091168d565b6040516100bc9d9c9b9a99989796959493929190611908565b6100b26101803660046118b6565b610297565b34801561019157600080fd5b506100906101a0366004611886565b610918565b3480156101b157600080fd5b506100b26101c03660046117a2565b610a0d565b3480156101d157600080fd5b506100b26101e0366004611768565b611128565b3480156101f157600080fd5b506100b2610200366004611854565b6111c7565b6040516351cff8d960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906351cff8d9906102519084906004016118f4565b600060405180830381600087803b15801561026b57600080fd5b505af115801561027f573d6000803e3d6000fd5b5050505050565b6000610291826111d2565b92915050565b6000826102a38161121f565b6102c85760405162461bcd60e51b81526004016102bf90611a2b565b60405180910390fd5b60008481526002602052604090206008015460ff166103295760405162461bcd60e51b815260206004820152601d60248201527f41756374696f6e20686173206e6f74206265656e20617070726f76656400000060448201526064016102bf565b60008481526002602052604090206001015442101561038a5760405162461bcd60e51b815260206004820152601b60248201527f41756374696f6e20686173206e6f74207374617274656420796574000000000060448201526064016102bf565b610393846111d2565b6103ca5760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b60448201526064016102bf565b60006103d585611244565b9050808410156104335760405162461bcd60e51b815260206004820152602360248201527f4d757374206265206d6f7265206f7220657175616c20746f2073616c6520707260448201526269636560e81b60648201526084016102bf565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061046957610469611b4f565b6001600160a01b03909216602092830291909101909101528161057457600086815260026020526040908190205490517fc30e87332dc11a80748906cfe42d2728067b8207771bbe9e0c96259f2e7c8c97916104d49189916001600160a01b03169086903390611a5a565b60405180910390a160008681526002602052604090819020549051630f6a934960e01b81526001600160a01b0390911690630f6a934990610519908490600401611996565b602060405180830381600087803b15801561053357600080fd5b505af1158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b919061186d565b93505050610911565b600086815260026020526040808220600a015490516370a0823160e01b81526001600160a01b03909116919082906370a08231906105b69030906004016118f4565b60206040518083038186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610606919061186d565b905061061d6001600160a01b038316333087611371565b6040516370a0823160e01b81526000906001600160a01b038416906370a082319061064c9030906004016118f4565b60206040518083038186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c919061186d565b9050806106a98684611a81565b146107315760405162461bcd60e51b815260206004820152604c60248201527f5f68616e646c65496e636f6d696e675472616e7366657220746f6b656e20747260448201527f616e736665722063616c6c20646964206e6f74207472616e736665722065787060648201526b1958dd195908185b5bdd5b9d60a21b608482015260a4016102bf565b60008981526002602052604090206008015461010090046001600160a01b031661078857600089815260026020526040902060050154610783906001600160a01b0385811691610100900416876113e2565b610824565b6000898152600260205260408120600901546107b390612710906107ad908990611412565b90611425565b60008b8152600260205260409020600801549091506107e4906001600160a01b0386811691610100900416836113e2565b60006107f08783611431565b60008c815260026020526040902060050154909150610821906001600160a01b0387811691610100900416836113e2565b50505b600089815260026020526040908190205490517fc30e87332dc11a80748906cfe42d2728067b8207771bbe9e0c96259f2e7c8c9791610872918c916001600160a01b03169089903390611a5a565b60405180910390a160008981526002602052604090819020549051630f6a934960e01b81526001600160a01b0390911690630f6a9349906108b7908790600401611996565b602060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610909919061186d565b965050505050505b5092915050565b816109228161121f565b61093e5760405162461bcd60e51b81526004016102bf90611a2b565b60008381526002602052604090206008015461010090046001600160a01b0316331461099e5760405162461bcd60e51b815260206004820152600f60248201526e36bab9ba1031329031bab930ba37b960891b60448201526064016102bf565b60008381526002602052604090206001015442106109fe5760405162461bcd60e51b815260206004820152601b60248201527f41756374696f6e2068617320616c72656164792073746172746564000000000060448201526064016102bf565b610a08838361143d565b505050565b600060026000541415610a625760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102bf565b60026000556040516301ffc9a760e01b81526001600160a01b038b16906301ffc9a790610a9a906380ac58cd60e01b906004016119e3565b60206040518083038186803b158015610ab257600080fd5b505afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea9190611837565b610b365760405162461bcd60e51b815260206004820152601d60248201527f446f65736e277420737570706f7274204e465420696e7465726661636500000060448201526064016102bf565b6040516301ffc9a760e01b81526001600160a01b038b16906301ffc9a790610b69906317e28f2d60e11b906004016119e3565b60206040518083038186803b158015610b8157600080fd5b505afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb99190611837565b610c195760405162461bcd60e51b815260206004820152602b60248201527f446f65736e277420737570706f7274205a6f7261204e46542045646974696f6e60448201526a7320696e7465726661636560a81b60648201526084016102bf565b60008a6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5457600080fd5b505afa158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c9190611785565b9050336001600160a01b03821614610cf15760405162461bcd60e51b815260206004820152602260248201527f43616c6c6572206d7573742062652063726561746f72206f662065646974696f6044820152616e7360f01b60648201526084016102bf565b868811610d525760405162461bcd60e51b815260206004820152602960248201527f5374617274207072696365206d75737420626520686967686572207468656e20604482015268656e6420707269636560b81b60648201526084016102bf565b6001600160a01b038516610dbc578315610dbc5760405162461bcd60e51b815260206004820152602560248201527f526f79616c7469657320776f756c642062652073656e7420696e746f20746865604482015264081d9bda5960da1b60648201526084016102bf565b6000610dca8a8a8a8a6114b0565b600154602082015191925060ff161115610e3f5760405162461bcd60e51b815260206004820152603060248201527f537465702074696d65206d75737420626520686967686572207468616e206d6960448201526f6e696d75696d20737465702074696d6560801b60648201526084016102bf565b6000610e4a60035490565b9050604051806101a001604052808e6001600160a01b031681526020018d81526020018c81526020018b81526020018a81526020018960ff168152602001846001600160a01b031681526020018360000151815260200183602001518152602001600015158152602001886001600160a01b03168152602001878152602001866001600160a01b03168152506002600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360ff16021790555060c08201518160050160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e0820151816006015561010082015181600701556101208201518160080160006101000a81548160ff0219169083151502179055506101408201518160080160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550610160820151816009015561018082015181600a0160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505061103a600380546001019055565b7f17d978b085d51be1d974075d6a9c8c2ca6d2b3acd7459da63e9eb995f6fd7a2181848f8f8f8f8f8f8f8f8f6040516110d49b9a999897969594939291909a8b526001600160a01b03998a1660208c015297891660408b015260608a0196909652608089019490945260a088019290925260c087015260ff1660e08601528316610100850152610120840152166101408201526101600190565b60405180910390a16001600160a01b03871615806111035750826001600160a01b0316876001600160a01b0316145b156111135761111381600161143d565b60016000559c9b505050505050505050505050565b6040516371d4ed8d60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e3a9db1a906111779085906004016118f4565b60206040518083038186803b15801561118f57600080fd5b505afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610291919061186d565b600061029182611244565b6000818152600260209081526040808320548151630b65b6e760e01b815291516001600160a01b0390911692630b65b6e79260048082019391829003018186803b15801561118f57600080fd5b60009081526002602052604090206005015461010090046001600160a01b0316151590565b600081815260026020819052604082209081015460019091015461126791611506565b421115611284575060009081526002602052604090206004015490565b600082815260026020526040902060078101546001909101546112a691611506565b4210156112c3575060009081526002602052604090206003015490565b6000828152600260205260408120600101546112e0904290611431565b60008481526002602052604081206007015491925090611301908390611512565b60008581526002602052604081206007015491925090611325906107ad8585611431565b9050611368611350611338600184611acc565b60008881526002602052604090206006015490611412565b60008781526002602052604090206003015490611431565b95945050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113dc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261151e565b50505050565b6040516001600160a01b038316602482015260448101829052610a0890849063a9059cbb60e01b906064016113a5565b600061141e8284611aad565b9392505050565b600061141e8284611a99565b600061141e8284611acc565b60008281526002602090815260409182902060088101805485151560ff199091168117909155905483518681526001600160a01b03909116928101929092528183015290517fb46f4988335ad625129457eeb1dce85f43960baf55c208c4e6be1b4402af59269181900360600190a15050565b604080518082019091526000808252602082015260408051808201909152600080825260208201526114e960ff84166107ad8787611431565b81526114f88660ff8516611425565b602082015295945050505050565b600061141e8284611a81565b600061141e8284611b0f565b6000611573826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115f09092919063ffffffff16565b805190915015610a0857808060200190518101906115919190611837565b610a085760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102bf565b60606115ff8484600085611607565b949350505050565b6060824710156116685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102bf565b843b6116b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102bf565b600080866001600160a01b031685876040516116d291906118d8565b60006040518083038185875af1925050503d806000811461170f576040519150601f19603f3d011682016040523d82523d6000602084013e611714565b606091505b509150915061172482828661172f565b979650505050505050565b6060831561173e57508161141e565b82511561174e5782518084602001fd5b8160405162461bcd60e51b81526004016102bf91906119f8565b60006020828403121561177a57600080fd5b813561141e81611b65565b60006020828403121561179757600080fd5b815161141e81611b65565b60008060008060008060008060006101208a8c0312156117c157600080fd5b89356117cc81611b65565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a013560ff811681146117fe57600080fd5b935060c08a013561180e81611b65565b925060e08a013591506101008a013561182681611b65565b809150509295985092959850929598565b60006020828403121561184957600080fd5b815161141e81611b7d565b60006020828403121561186657600080fd5b5035919050565b60006020828403121561187f57600080fd5b5051919050565b6000806040838503121561189957600080fd5b8235915060208301356118ab81611b7d565b809150509250929050565b600080604083850312156118c957600080fd5b50508035926020909101359150565b600082516118ea818460208701611ae3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038e81168252602082018e9052604082018d9052606082018c9052608082018b905260ff8a1660a083015288811660c083015260e08201889052610100820187905285151561012083015284166101408201526101a08101836101608301526119846101808301846001600160a01b03169052565b9e9d5050505050505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156119d75783516001600160a01b0316835292840192918401916001016119b2565b50909695505050505050565b6001600160e01b031991909116815260200190565b6020815260008251806020840152611a17816040850160208701611ae3565b601f01601f19169190910160400192915050565b602080825260159082015274105d58dd1a5bdb88191bd95cdb89dd08195e1a5cdd605a1b604082015260600190565b9384526001600160a01b039283166020850152604084019190915216606082015260800190565b60008219821115611a9457611a94611b23565b500190565b600082611aa857611aa8611b39565b500490565b6000816000190483118215151615611ac757611ac7611b23565b500290565b600082821015611ade57611ade611b23565b500390565b60005b83811015611afe578181015183820152602001611ae6565b838111156113dc5750506000910152565b600082611b1e57611b1e611b39565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114611b7a57600080fd5b50565b8015158114611b7a57600080fdfea2646970667358221220a2dfe071084ae878e077229783dfc8831f10c897f5f07d0d5f282d0307dc9d1b64736f6c63430008060033608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61059c8061007e6000396000f3fe6080604052600436106100555760003560e01c806351cff8d91461005a578063715018a61461007c5780638da5cb5b14610091578063e3a9db1a146100c3578063f2fde38b14610107578063f340fa0114610127575b600080fd5b34801561006657600080fd5b5061007a6100753660046104d2565b61013a565b005b34801561008857600080fd5b5061007a6101e1565b34801561009d57600080fd5b506100a661021c565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100cf57600080fd5b506100f96100de3660046104d2565b6001600160a01b031660009081526001602052604090205490565b6040519081526020016100ba565b34801561011357600080fd5b5061007a6101223660046104d2565b61022b565b61007a6101353660046104d2565b6102cb565b3361014361021c565b6001600160a01b0316146101725760405162461bcd60e51b8152600401610169906104f6565b60405180910390fd5b6001600160a01b038116600081815260016020526040812080549190559061019a9082610364565b816001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5826040516101d591815260200190565b60405180910390a25050565b336101ea61021c565b6001600160a01b0316146102105760405162461bcd60e51b8152600401610169906104f6565b61021a6000610482565b565b6000546001600160a01b031690565b3361023461021c565b6001600160a01b03161461025a5760405162461bcd60e51b8152600401610169906104f6565b6001600160a01b0381166102bf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610169565b6102c881610482565b50565b336102d461021c565b6001600160a01b0316146102fa5760405162461bcd60e51b8152600401610169906104f6565b6001600160a01b03811660009081526001602052604081208054349283929161032490849061052b565b90915550506040518181526001600160a01b038316907f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4906020016101d5565b804710156103b45760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610169565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610401576040519150601f19603f3d011682016040523d82523d6000602084013e610406565b606091505b505090508061047d5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610169565b505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104e457600080fd5b81356104ef81610551565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000821982111561054c57634e487b7160e01b600052601160045260246000fd5b500190565b6001600160a01b03811681146102c857600080fdfea264697066735822122002266e7113f574851970fbf33584e072a6d7326a4a0803476de99fa576416a8864736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061006b5760003560e01c806331b3eb941461007057806355e91d1614610092578063571a26a0146100c557806370876c9814610172578063973ddb4a14610185578063d9a17be2146101a5578063e2982c21146101c5578063f8eb5fc5146101e5575b600080fd5b34801561007c57600080fd5b5061009061008b366004611768565b610205565b005b34801561009e57600080fd5b506100b26100ad366004611854565b610286565b6040519081526020015b60405180910390f35b3480156100d157600080fd5b506101596100e0366004611854565b600260208190526000918252604090912080546001820154928201546003830154600484015460058501546006860154600787015460088801546009890154600a909901546001600160a01b039889169a9997989697959660ff808716976101009788900483169791851694919091048216929091168d565b6040516100bc9d9c9b9a99989796959493929190611908565b6100b26101803660046118b6565b610297565b34801561019157600080fd5b506100906101a0366004611886565b610918565b3480156101b157600080fd5b506100b26101c03660046117a2565b610a0d565b3480156101d157600080fd5b506100b26101e0366004611768565b611128565b3480156101f157600080fd5b506100b2610200366004611854565b6111c7565b6040516351cff8d960e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906351cff8d9906102519084906004016118f4565b600060405180830381600087803b15801561026b57600080fd5b505af115801561027f573d6000803e3d6000fd5b5050505050565b6000610291826111d2565b92915050565b6000826102a38161121f565b6102c85760405162461bcd60e51b81526004016102bf90611a2b565b60405180910390fd5b60008481526002602052604090206008015460ff166103295760405162461bcd60e51b815260206004820152601d60248201527f41756374696f6e20686173206e6f74206265656e20617070726f76656400000060448201526064016102bf565b60008481526002602052604090206001015442101561038a5760405162461bcd60e51b815260206004820152601b60248201527f41756374696f6e20686173206e6f74207374617274656420796574000000000060448201526064016102bf565b610393846111d2565b6103ca5760405162461bcd60e51b815260206004820152600860248201526714dbdb19081bdd5d60c21b60448201526064016102bf565b60006103d585611244565b9050808410156104335760405162461bcd60e51b815260206004820152602360248201527f4d757374206265206d6f7265206f7220657175616c20746f2073616c6520707260448201526269636560e81b60648201526084016102bf565b60408051600180825281830190925260009160208083019080368337019050509050338160008151811061046957610469611b4f565b6001600160a01b03909216602092830291909101909101528161057457600086815260026020526040908190205490517fc30e87332dc11a80748906cfe42d2728067b8207771bbe9e0c96259f2e7c8c97916104d49189916001600160a01b03169086903390611a5a565b60405180910390a160008681526002602052604090819020549051630f6a934960e01b81526001600160a01b0390911690630f6a934990610519908490600401611996565b602060405180830381600087803b15801561053357600080fd5b505af1158015610547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056b919061186d565b93505050610911565b600086815260026020526040808220600a015490516370a0823160e01b81526001600160a01b03909116919082906370a08231906105b69030906004016118f4565b60206040518083038186803b1580156105ce57600080fd5b505afa1580156105e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610606919061186d565b905061061d6001600160a01b038316333087611371565b6040516370a0823160e01b81526000906001600160a01b038416906370a082319061064c9030906004016118f4565b60206040518083038186803b15801561066457600080fd5b505afa158015610678573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069c919061186d565b9050806106a98684611a81565b146107315760405162461bcd60e51b815260206004820152604c60248201527f5f68616e646c65496e636f6d696e675472616e7366657220746f6b656e20747260448201527f616e736665722063616c6c20646964206e6f74207472616e736665722065787060648201526b1958dd195908185b5bdd5b9d60a21b608482015260a4016102bf565b60008981526002602052604090206008015461010090046001600160a01b031661078857600089815260026020526040902060050154610783906001600160a01b0385811691610100900416876113e2565b610824565b6000898152600260205260408120600901546107b390612710906107ad908990611412565b90611425565b60008b8152600260205260409020600801549091506107e4906001600160a01b0386811691610100900416836113e2565b60006107f08783611431565b60008c815260026020526040902060050154909150610821906001600160a01b0387811691610100900416836113e2565b50505b600089815260026020526040908190205490517fc30e87332dc11a80748906cfe42d2728067b8207771bbe9e0c96259f2e7c8c9791610872918c916001600160a01b03169089903390611a5a565b60405180910390a160008981526002602052604090819020549051630f6a934960e01b81526001600160a01b0390911690630f6a9349906108b7908790600401611996565b602060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610909919061186d565b965050505050505b5092915050565b816109228161121f565b61093e5760405162461bcd60e51b81526004016102bf90611a2b565b60008381526002602052604090206008015461010090046001600160a01b0316331461099e5760405162461bcd60e51b815260206004820152600f60248201526e36bab9ba1031329031bab930ba37b960891b60448201526064016102bf565b60008381526002602052604090206001015442106109fe5760405162461bcd60e51b815260206004820152601b60248201527f41756374696f6e2068617320616c72656164792073746172746564000000000060448201526064016102bf565b610a08838361143d565b505050565b600060026000541415610a625760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102bf565b60026000556040516301ffc9a760e01b81526001600160a01b038b16906301ffc9a790610a9a906380ac58cd60e01b906004016119e3565b60206040518083038186803b158015610ab257600080fd5b505afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea9190611837565b610b365760405162461bcd60e51b815260206004820152601d60248201527f446f65736e277420737570706f7274204e465420696e7465726661636500000060448201526064016102bf565b6040516301ffc9a760e01b81526001600160a01b038b16906301ffc9a790610b69906317e28f2d60e11b906004016119e3565b60206040518083038186803b158015610b8157600080fd5b505afa158015610b95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb99190611837565b610c195760405162461bcd60e51b815260206004820152602b60248201527f446f65736e277420737570706f7274205a6f7261204e46542045646974696f6e60448201526a7320696e7465726661636560a81b60648201526084016102bf565b60008a6001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c5457600080fd5b505afa158015610c68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8c9190611785565b9050336001600160a01b03821614610cf15760405162461bcd60e51b815260206004820152602260248201527f43616c6c6572206d7573742062652063726561746f72206f662065646974696f6044820152616e7360f01b60648201526084016102bf565b868811610d525760405162461bcd60e51b815260206004820152602960248201527f5374617274207072696365206d75737420626520686967686572207468656e20604482015268656e6420707269636560b81b60648201526084016102bf565b6001600160a01b038516610dbc578315610dbc5760405162461bcd60e51b815260206004820152602560248201527f526f79616c7469657320776f756c642062652073656e7420696e746f20746865604482015264081d9bda5960da1b60648201526084016102bf565b6000610dca8a8a8a8a6114b0565b600154602082015191925060ff161115610e3f5760405162461bcd60e51b815260206004820152603060248201527f537465702074696d65206d75737420626520686967686572207468616e206d6960448201526f6e696d75696d20737465702074696d6560801b60648201526084016102bf565b6000610e4a60035490565b9050604051806101a001604052808e6001600160a01b031681526020018d81526020018c81526020018b81526020018a81526020018960ff168152602001846001600160a01b031681526020018360000151815260200183602001518152602001600015158152602001886001600160a01b03168152602001878152602001866001600160a01b03168152506002600083815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff021916908360ff16021790555060c08201518160050160016101000a8154816001600160a01b0302191690836001600160a01b0316021790555060e0820151816006015561010082015181600701556101208201518160080160006101000a81548160ff0219169083151502179055506101408201518160080160016101000a8154816001600160a01b0302191690836001600160a01b03160217905550610160820151816009015561018082015181600a0160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555090505061103a600380546001019055565b7f17d978b085d51be1d974075d6a9c8c2ca6d2b3acd7459da63e9eb995f6fd7a2181848f8f8f8f8f8f8f8f8f6040516110d49b9a999897969594939291909a8b526001600160a01b03998a1660208c015297891660408b015260608a0196909652608089019490945260a088019290925260c087015260ff1660e08601528316610100850152610120840152166101408201526101600190565b60405180910390a16001600160a01b03871615806111035750826001600160a01b0316876001600160a01b0316145b156111135761111381600161143d565b60016000559c9b505050505050505050505050565b6040516371d4ed8d60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063e3a9db1a906111779085906004016118f4565b60206040518083038186803b15801561118f57600080fd5b505afa1580156111a3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610291919061186d565b600061029182611244565b6000818152600260209081526040808320548151630b65b6e760e01b815291516001600160a01b0390911692630b65b6e79260048082019391829003018186803b15801561118f57600080fd5b60009081526002602052604090206005015461010090046001600160a01b0316151590565b600081815260026020819052604082209081015460019091015461126791611506565b421115611284575060009081526002602052604090206004015490565b600082815260026020526040902060078101546001909101546112a691611506565b4210156112c3575060009081526002602052604090206003015490565b6000828152600260205260408120600101546112e0904290611431565b60008481526002602052604081206007015491925090611301908390611512565b60008581526002602052604081206007015491925090611325906107ad8585611431565b9050611368611350611338600184611acc565b60008881526002602052604090206006015490611412565b60008781526002602052604090206003015490611431565b95945050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526113dc9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261151e565b50505050565b6040516001600160a01b038316602482015260448101829052610a0890849063a9059cbb60e01b906064016113a5565b600061141e8284611aad565b9392505050565b600061141e8284611a99565b600061141e8284611acc565b60008281526002602090815260409182902060088101805485151560ff199091168117909155905483518681526001600160a01b03909116928101929092528183015290517fb46f4988335ad625129457eeb1dce85f43960baf55c208c4e6be1b4402af59269181900360600190a15050565b604080518082019091526000808252602082015260408051808201909152600080825260208201526114e960ff84166107ad8787611431565b81526114f88660ff8516611425565b602082015295945050505050565b600061141e8284611a81565b600061141e8284611b0f565b6000611573826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166115f09092919063ffffffff16565b805190915015610a0857808060200190518101906115919190611837565b610a085760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016102bf565b60606115ff8484600085611607565b949350505050565b6060824710156116685760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016102bf565b843b6116b65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102bf565b600080866001600160a01b031685876040516116d291906118d8565b60006040518083038185875af1925050503d806000811461170f576040519150601f19603f3d011682016040523d82523d6000602084013e611714565b606091505b509150915061172482828661172f565b979650505050505050565b6060831561173e57508161141e565b82511561174e5782518084602001fd5b8160405162461bcd60e51b81526004016102bf91906119f8565b60006020828403121561177a57600080fd5b813561141e81611b65565b60006020828403121561179757600080fd5b815161141e81611b65565b60008060008060008060008060006101208a8c0312156117c157600080fd5b89356117cc81611b65565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a013560ff811681146117fe57600080fd5b935060c08a013561180e81611b65565b925060e08a013591506101008a013561182681611b65565b809150509295985092959850929598565b60006020828403121561184957600080fd5b815161141e81611b7d565b60006020828403121561186657600080fd5b5035919050565b60006020828403121561187f57600080fd5b5051919050565b6000806040838503121561189957600080fd5b8235915060208301356118ab81611b7d565b809150509250929050565b600080604083850312156118c957600080fd5b50508035926020909101359150565b600082516118ea818460208701611ae3565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b038e81168252602082018e9052604082018d9052606082018c9052608082018b905260ff8a1660a083015288811660c083015260e08201889052610100820187905285151561012083015284166101408201526101a08101836101608301526119846101808301846001600160a01b03169052565b9e9d5050505050505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156119d75783516001600160a01b0316835292840192918401916001016119b2565b50909695505050505050565b6001600160e01b031991909116815260200190565b6020815260008251806020840152611a17816040850160208701611ae3565b601f01601f19169190910160400192915050565b602080825260159082015274105d58dd1a5bdb88191bd95cdb89dd08195e1a5cdd605a1b604082015260600190565b9384526001600160a01b039283166020850152604084019190915216606082015260800190565b60008219821115611a9457611a94611b23565b500190565b600082611aa857611aa8611b39565b500490565b6000816000190483118215151615611ac757611ac7611b23565b500290565b600082821015611ade57611ade611b23565b500390565b60005b83811015611afe578181015183820152602001611ae6565b838111156113dc5750506000910152565b600082611b1e57611b1e611b39565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114611b7a57600080fd5b50565b8015158114611b7a57600080fdfea2646970667358221220a2dfe071084ae878e077229783dfc8831f10c897f5f07d0d5f282d0307dc9d1b64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createAuction(address,uint256,uint256,uint256,uint256,uint8,address,uint256,address)": {
        "details": "Store the auction details in the auctions mapping and emit an AuctionCreated event. If there is no curator, or if the curator is the auction creator, automatically approve the auction and emit an AuctionApproved event.",
        "params": {
          "curator": "the address of the allocated curator",
          "curatorRoyaltyBPS": "the royalty the curator will recieve per purchase in basis points",
          "duration": "the duration the auction will run for",
          "editionContract": "the contract of which NFT's will be minted",
          "endPrice": "the price in eth the auction will end at",
          "numberOfPriceDrops": "the number of times the price will drop between starting and ending price",
          "startPrice": "the price in eth the auction will start at",
          "startTimestamp": "the time the auction will start"
        },
        "returns": {
          "_0": "auction id"
        }
      },
      "getSalePrice(uint256)": {
        "details": "calculates the price based on the block.timestamp",
        "params": {
          "auctionId": "the id of the auction"
        },
        "returns": {
          "_0": "price in wei"
        }
      },
      "payments(address)": {
        "details": "Returns the payments owed to an address.",
        "params": {
          "dest": "The creditor's address."
        }
      },
      "purchase(uint256,uint256)": {
        "details": "mints an NFT and splits purchase fee between creator and curator",
        "params": {
          "auctionId": "the id of the auction"
        },
        "returns": {
          "_0": "the id of the NFT"
        }
      },
      "setAuctionApproval(uint256,bool)": {
        "details": "sets auction approved to approval and emits an AuctionApprovalUpdated event",
        "params": {
          "approved": "the curators approval decision",
          "auctionId": "the id of the auction"
        }
      },
      "withdrawPayments(address)": {
        "details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
        "params": {
          "payee": "Whose payments will be withdrawn."
        }
      }
    },
    "title": "An open dutch auction house, for initial drops of limited edition nft contracts.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "createAuction(address,uint256,uint256,uint256,uint256,uint8,address,uint256,address)": {
        "notice": "Create an auction."
      },
      "getSalePrice(uint256)": {
        "notice": "gets the current sale price of an auction"
      },
      "purchase(uint256,uint256)": {
        "notice": "Purchases an NFT"
      },
      "setAuctionApproval(uint256,bool)": {
        "notice": "allows curator to approve auction"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2126,
        "contract": "contracts/EditionsAuction.sol:EditionsAuction",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4617,
        "contract": "contracts/EditionsAuction.sol:EditionsAuction",
        "label": "minStepTime",
        "offset": 0,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 4628,
        "contract": "contracts/EditionsAuction.sol:EditionsAuction",
        "label": "auctions",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Auction)5362_storage)"
      },
      {
        "astId": 4631,
        "contract": "contracts/EditionsAuction.sol:EditionsAuction",
        "label": "_auctionIdTracker",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)2898_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Auction)5362_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IEditionsAuction.Auction)",
        "numberOfBytes": "32",
        "value": "t_struct(Auction)5362_storage"
      },
      "t_struct(Auction)5362_storage": {
        "encoding": "inplace",
        "label": "struct IEditionsAuction.Auction",
        "members": [
          {
            "astId": 5337,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "editionContract",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5339,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "startTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5341,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "duration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5343,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "startPrice",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5345,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "endPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5347,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "numberOfPriceDrops",
            "offset": 0,
            "slot": "5",
            "type": "t_uint8"
          },
          {
            "astId": 5349,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "creator",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          },
          {
            "astId": 5351,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "stepPrice",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 5353,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "stepTime",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 5355,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "approved",
            "offset": 0,
            "slot": "8",
            "type": "t_bool"
          },
          {
            "astId": 5357,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "curator",
            "offset": 1,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 5359,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "curatorRoyaltyBPS",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 5361,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "auctionCurrency",
            "offset": 0,
            "slot": "10",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Counter)2898_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2897,
            "contract": "contracts/EditionsAuction.sol:EditionsAuction",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}