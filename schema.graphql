enum ProjectImplementation {
  Standard,
  Seeded
}

type ProjectCreator @entity {
  "The address of the project creator smart contract"
  id: ID!

  """
  The status of project creation.
  False means only curated creators can create new projects.
  True means everyone can create new projects.
  """
  isOpen: Boolean!

  "The total number of projects created"
  totalProjects: BigInt!

  "The total number of projects with seeded implementation created"
  totalSeededProjects: BigInt!

  "The total number of projects with standard implementation created"
  totalStandardProjects: BigInt!
}

type Project @entity {
  "The smart-contract address of the project"
  id: ID!

  "The id number given by the projectCreator smart-contract"
  projectId: BigInt!

  "The creator of the project"
  creator: User!

  "The total size of editions"
  editionSize: BigInt!

  "The total editions minted"
  totalMinted: BigInt!

  "The total editions burned"
  totalBurned: BigInt!

  "The total editions in supply (minted - burned)"
  totalSupply: BigInt!

  "The addresses for approved minter"
  approvedMinters: [ProjectMinterApproval!]! @derivedFrom(field: "project")

  # TODO: add latest version by label
  # "The latest version by label"
  # latestVersion: Version!

  "The last version added"
  lastAddedVersion: Version

  "The history of urls and hashes"
  versions: [Version!]! @derivedFrom(field: "project")

  "The name of project"
  name: String

  "The symbol of project"
  symbol: String

  "The description of project"
  description: String

  "The implementation type of the project smart contract"
  implementation: ProjectImplementation!

  "The royalty the recipient receives on secondary sales in 'basis points' percentage"
  royaltyBPS: BigInt

  "The address where royalties are sent"
  royaltyRecipient: User!

  "The editions minted"
  editions: [Edition!] @derivedFrom(field: "project")

  "The timestamp of the block the Project was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Project was created in"
  createdAtBlockNumber: BigInt!

  "The timestamp of the block the Project was removed in"
  removedAtTimestamp: BigInt!

  "The number of the block the Project was removed in"
  removedAtBlockNumber: BigInt!

  "The dutch auction drops associated with this project"
  dutchAuctionDrops: [DutchAuctionDrop!] @derivedFrom(field: "project")
}

type ProjectMinterApproval @entity {
  "<userId-projectId>"
  id: ID!

  "The user of the mint approval"
  user: User!

  "The project of the mint approval"
  project: Project!

  "The approval status of whether the user can mint editions"
  status: Boolean!
}

enum UrlType {
  Image,
  Animation,
  PatchNotes
}

type UrlHashPair @entity{
  "<versionID-type>"
  id: ID!

  "The url"
  url: String!

  "The sha-256 hash of the content on the url"
  hash: String!

  "The type of url"
  type: UrlType!

  "The Version for "
  version: Version!

  "The Url Updates"
  urlUpdates: [UrlUpdate!]! @derivedFrom(field: "urlHashPair")

  "The timestamp of the block the URIUpdate was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the URIUpdate was created in"
  createdAtBlockNumber: BigInt!
}

type UrlUpdate @entity{
  "<transactionHash>-<logIndex>"
  id: ID!

  "The transaction has the url update happened at"
  transactionHash: String!

  "The previous url"
  from: String!

  "The previous url"
  to: String!

  "The project associated with the UrlUpdate"
  project: Project!

  "The Version associated with the UrlUpdate"
  version: Version!

  "The UrlHashPair associated with the UrlUpdate"
  urlHashPair: UrlHashPair!

  "The timestamp of the block the URIUpdate was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the URIUpdate was created in"
  createdAtBlockNumber: BigInt!
}

type Version @entity {
  "<projectSmartContractAddress-versionLabel>"
  id: ID!

  "The project of the version"
  project: Project!

  "The semantic label of the version"
  label: String!

  "The url and hash pair of image url"
  image: UrlHashPair!

  "The url and hash pair of animation url"
  animation: UrlHashPair!

  "The url and hash pair of the patch notes url"
  patchNotes: UrlHashPair!

  "The timestamp of the block the Purchase was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Purchase was created in"
  createdAtBlockNumber: BigInt!
}

type Edition @entity {
  "<projectSmartContractAddress-editionNumber>"
  id: ID!

  "The seed number of the edition. null for non-seeded implementations"
  seed: BigInt

  "The number of the edition"
  number: BigInt!

  "The project the edition is derived from"
  project: Project!

   "The current owner of the edition"
  owner: User!

  "The previous owner of the edition"
  prevOwner: User!

  "The Base64 encoded uri of the metadata for the edition"
  uri: String!

  "The transaction hash the edition was minted"
  createdAtTransactionHash: String!

  "The timestamp of the block the Purchase was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Purchase was created in"
  createdAtBlockNumber: BigInt!

  "The transfers of edition"
  transfers: [Transfer!]! @derivedFrom(field: "edition")

  "The timestamp of the block the edition was burned in"
  burnedAtTimeStamp: BigInt!

  "The number of the block the edition was burned in"
  burnedAtBlockNumber: BigInt!

  "The approved user of the edition"
  approved: User
}

type Currency @entity {
  "The address of the Currency"
  id: ID!

  "The name of the Currency"
  name: String!

  "The symbol of the Currency"
  symbol: String!

  "The decimals of the Currency"
  decimals: Int

  "The purchases made with the Currency"
  previousPurchases: [Purchase!] @derivedFrom(field: "currency")
}

enum UserType {
  "Externally Owned Address"
  EOA
  "0xSplits Smart contract"
  SplitWallet
}

type Profile @entity {
  "<Ethereum Address'-profile'>"
  id: ID!

  "The user the profile belongs to"
  user: User!

  "The display name of the user"
  name: String!

  "The description of the user"
  description: String!

  "The URI of an external link for more info about the user"
  link: String!

  "The timestamp of the last time name, description or link were updated"
  updatedAtTimestamp: BigInt!

  "The block number of the last time name, description or link were updated"
  updatedAtBlockNumber: BigInt!
}

type User @entity {
  "Ethereum Address"
  id: ID!

  # TODO: index approval events
  # "Users that have been granted `ApprovalForAll` editions of the User's Collection"
  # authorizedUsers: [User!]

  profile: Profile @derivedFrom(field: "user")

  "The projects the user is approved to mint"
  approvedToMint: [ProjectMinterApproval!]! @derivedFrom(field: "user")

  "The editions the User owns"
  collection: [Edition!]! @derivedFrom(field: "owner")

  # "The projects the User created"
  creations: [Project!]! @derivedFrom(field: "creator")

  "The Purchases made by the User"
  previousPurchases: [Purchase!]! @derivedFrom(field: "collector")

  "The approval status of the users ability to create projects"
  curatedCreator: Boolean!

  "The type of User, needs to be verified"
  type: UserType!
}

enum PurchaseType {
  Refunded
  Final
}

type Purchase @entity {
  "<txHash>"
  id: ID!

  "The transaction hash the purchase was made at"
  transactionHash: String!

  "The edition purchased"
  edition: Edition!

  "The dutch auction drop associated with the Purchase"
  dutchAuctionDrop: DutchAuctionDrop!

  "The amount of the Purchase"
  amount: BigInt!

  "The initiator of the Purchase"
  collector: User!

  "The type of purchase (Refunded, Final)"
  purchaseType: PurchaseType!

  "The Currency the purchase was made in"
  currency: Currency!

  "The timestamp of the block the Purchase was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Purchase was created in"
  createdAtBlockNumber: BigInt!
}

type Transfer @entity {
  "<projectSmartContractAddress>-<editionId>-<transactionHash>"
  id: ID!

  "Transaction hash for the transfer"
  transactionHash: String!

  "The edition transferred"
  edition: Edition!

  "The User transferring the edition"
  from: User!

  "The User receiving the edition"
  to: User!

  "The timestamp of the block the Transfer was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Transfer was created in"
  createdAtBlockNumber: BigInt!
}

enum AskStatus {
  Active
  Filled
}

type Ask @entity {
  "<projectSmartContractAddress>-<editionId> if filled <projectSmartContractAddress>-<editionId>-<txHash>"
  id: ID!

  "The edition the ask is for"
  edition: Edition!

  "The current asking price"
  price: BigInt!

  "The Currency the purchase was made in"
  currency: Currency!

  "The status of the ask 'Active' or 'Filled'"
  status: AskStatus!

  "The user that filled the ask, null if not filled"
  collector: User

  "The timestamp of the block the Ask was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Ask was created in"
  createdAtBlockNumber: BigInt!

  "The timestamp of the block the Ask was filled in"
  filledAtTimestamp: BigInt!

  "The number of the block the Ask was filled in"
  filledAtBlockNumber: BigInt!
}

enum DutchAuctionDropStatus {
  Pending
  Active
  Canceled
  Finished
}

type DutchAuctionDrop @entity {
  "ID of the dutch auction drop from <projectContractAddress-iteration>"
  id: ID!

  "Transaction hash where the auction was created"
  transactionHash: String!

  "The project of the auction"
  project: Project!

  "Whether or not the auction has been approved by the curator"
  approved: Boolean

  "The length of time the auction is intended to run for, after the first bid is made"
  duration: BigInt!

  "The time the auction will start"
  startTimestamp: BigInt

  "The time the auction will reach it's end price"
  endTimestamp: BigInt

  "The price the auction starts at"
  startPrice: BigInt!

  "The price the auction ends at"
  endPrice: BigInt!

  "The number of times the price drops during the auction"
  numberOfPriceDrops: Int!

  "The sale percentage to send to the curator"
  curatorRoyaltyBPS: BigInt!

  "The address that created the project"
  creator: User!

  "The address of the auction's curator"
  curator: User!

  "The address of the ERC-20 currency to run the auction with, or 0x0 for ETH"
  auctionCurrency: Currency!

  "The current status of the auction"
  status: DutchAuctionDropStatus!

  "The previous bids on this auction"
  previousPurchases: [Purchase!]  @derivedFrom(field: "dutchAuctionDrop")

  "The time the auction was approved"
  approvedTimestamp: BigInt

  "The number of the block the auction was Approved"
  approvedBlockNumber: BigInt

  "The timestamp of the block the Transfer was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Transfer was created in"
  createdAtBlockNumber: BigInt!

  "The timestamp at which the auction end function was called"
  finalizedAtTimestamp: BigInt

  "The block number at which the auction end function was called"
  finalizedAtBlockNumber: BigInt
}

