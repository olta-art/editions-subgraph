type TokenContract @entity {
  "The address of the token contract"
  id: ID!

  "The id given by the tokenConractCreator"
  tokenContractId: BigInt!

  "The creator of the tokenContract"
  creator: User!

  "The total size of editions"
  editionSize: BigInt!

  "The total tokens minted"
  totalMinted: BigInt!

  "The total tokens burned"
  totalBurned: BigInt!

  "The total tokens in supply (minted - burned)"
  totalSupply: BigInt!

  "The addressess for approved minter"
  approvedMinters: [TokenContractMinterApproval!]! @derivedFrom(field: "tokenContract")

  # TODO: add latest version by label
  # "The latest version by label"
  # latestVersion: Version!

  "The last version added"
  lastAddedVersion: Version

  "The history of urls and hashes"
  versions: [Version!]! @derivedFrom(field: "tokenContract")

  "The name of edition token"
  name: String

  "The symbol of edition token"
  symbol: String

  "The description of edition token"
  description: String

  "The roylaty the creator recives on secondary sales"
  creatorRoyaltyBPS: BigInt

  "The tokens minted"
  tokens: [Token!] @derivedFrom(field: "tokenContract")

  "The timestamp of the block the Purchase was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Purchase was created in"
  createdAtBlockNumber: BigInt!
}

type TokenContractMinterApproval @entity {
  "<userId-TokenContractId>"
  id: ID!

  "The user of the mint approval"
  user: User!

  "The token contract of the mint approval"
  tokenContract: TokenContract!

  "The approval status of whether the user can mint tokens"
  status: Boolean!
}

enum urlType {
  image,
  animation
}

type UrlHashPair @entity{
  "<versionID-type>"
  id: ID!

  "The url"
  url: String!

  "The sha-256 hash of the content on the url"
  hash: String!

  "The type of url"
  type: urlType!

  "The Version for "
  version: Version!

  "The Url Updates"
  urlUpdates: [UrlUpdate!]! @derivedFrom(field: "urlHashPair")

  "The timestamp of the block the URIUpdate was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the URIUpdate was created in"
  createdAtBlockNumber: BigInt!
}

type UrlUpdate @entity{
  "<transactionHash>-<logIndex>"
  id: ID!

  "The transaction has the url update happened at"
  transactionHash: String!

  "The previous url"
  from: String!

  "The previous url"
  to: String!

  "The Token associated with the UrlUpdate"
  tokenContract: TokenContract!

  "The Version associated with the UrlUpdate"
  version: Version!

  "The UrlHashPair associated with the UrlUpdate"
  urlHashPair: UrlHashPair!

  "The timestamp of the block the URIUpdate was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the URIUpdate was created in"
  createdAtBlockNumber: BigInt!
}

type Version @entity {
  "<tokenAddress-versionLabel>"
  id: ID!

  "The token the version is for"
  tokenContract: TokenContract!

  "The semantic label of the version"
  label: String!

  "The url and hash pair of image url"
  image: UrlHashPair!

  "The url and hash pair of animation url"
  animation: UrlHashPair!

  "The timestamp of the block the Purchase was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Purchase was created in"
  createdAtBlockNumber: BigInt!
}

type Token @entity {
  "<tokenContractAddress-editionNumber>"
  id: ID!

  "The edition number of the token"
  editionNumber: BigInt!

  "The token contract the token is derived from"
  tokenContract: TokenContract!

   "The current owner of the Media"
  owner: User!

  "The previous owner of the token"
  prevOwner: User!

  "The Base64 encoded URI metadata of the token"
  tokenURI: String!

  "The transaction hash the token was minted"
  createdAtTransactionHash: String!

  "The timestamp of the block the Purchase was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Purchase was created in"
  createdAtBlockNumber: BigInt!

  "The transfers of Token"
  transfers: [Transfer!]! @derivedFrom(field: "token")

  "The timestamp of the block the Media was burned in"
  burnedAtTimeStamp: BigInt

  "The number of the block the Media was burned in"
  burnedAtBlockNumber: BigInt

  "The approved user of the Token"
  approved: User
}

type Currency @entity {
  "The address of the Currency"
  id: ID!

  "The name of the Currency"
  name: String!

  "The symbol of the Currency"
  symbol: String!

  "The decimals of the Currency"
  decimals: Int

  "The purchases made with the Currency"
  previousPurchases: [Purchase!] @derivedFrom(field: "currency")
}

type User @entity {
  "Ethereum Address"
  id: ID!

  # TODO: index approval events
  # "Users that have been granted `ApprovalForAll` Media of the User's Collection"
  # authorizedUsers: [User!]

  "The TokenContracts the User is approved to mint"
  approvedToMint: [TokenContractMinterApproval!]! @derivedFrom(field: "user")

  "The Tokens the User owns"
  collection: [Token!]! @derivedFrom(field: "owner")

  # "The TokenContracts the User created"
  creations: [TokenContract!]! @derivedFrom(field: "creator")

  "The Purchaces made by the User"
  previousPurchases: [Purchase!]! @derivedFrom(field: "collector")
}

enum PurchaseType {
  Refunded
  Final
}

type Purchase @entity {
  "<txHash>"
  id: ID!

  "The transaction hash the purchase was made at"
  transactionHash: String!

  "The token purchased"
  token: Token!

  "The Editions auction associated with the Purchase"
  editionsAuction: EditionsAuction!

  "The amount of the Purchase"
  amount: BigInt!

  "The initiator of the Purchase"
  collector: User!

  "The type of purchase (Refunded, Final)"
  purchaseType: PurchaseType!

  "The Currency the purchase was made in"
  currency: Currency!

  "The timestamp of the block the Purchase was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Purchase was created in"
  createdAtBlockNumber: BigInt!
}

type Transfer @entity {
  "<tokenContractAddress>-<tokenId>-<transactionHash>"
  id: ID!

  "Transaction hash for the transfer"
  transactionHash: String!

  "The Token associated with the Transfer"
  token: Token!

  "The User transferring the Media"
  from: User!

  "The User receiving the Media"
  to: User!

  "The timestamp of the block the Transfer was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Transfer was created in"
  createdAtBlockNumber: BigInt!
}

enum EditionsAuctionStatus {
  Pending
  Active
  Canceled
  Finished
}

type EditionsAuction @entity {
  "ID of the editions auction from contract, autoincrementing int"
  id: ID!

  "Transaction hash where the editions auction was created"
  transactionHash: String!

  "The originating token contract for this auction"
  tokenContract: TokenContract!

  "Whether or not the auction has been approved by the curator"
  approved: Boolean

  "The length of time the auction is intended to run for, after the first bid is made"
  duration: BigInt!

  "The time the auction will start"
  startTimestamp: BigInt

  "The time the auction will reach it's end price"
  endTimestamp: BigInt

  "The price the auction starts at"
  startPrice: BigInt!

  "The price the auction ends at"
  endPrice: BigInt!

  "The number of times the price drops during the auction"
  numberOfPriceDrops: Int!

  "The sale percentage to send to the curator"
  curatorRoyaltyBPS: BigInt!

  "The address that created the editions and will recieve funds"
  creator: User!

  "The address of the auction's curator"
  curator: User!

  # "The address of the ERC-20 currency to run the auction with, or 0x0 for ETH"
  auctionCurrency: Currency!

  status: EditionsAuctionStatus!

  "The previous bids on this auction"
  previousPurchases: [Purchase!]  @derivedFrom(field: "editionsAuction")

  "The time the auction was approved"
  approvedTimestamp: BigInt

  "The number of the block the auction was Approved"
  approvedBlockNumber: BigInt

  "The timestamp of the block the Transfer was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Transfer was created in"
  createdAtBlockNumber: BigInt!

  "The timestamp at which the auction end function was called"
  finalizedAtTimestamp: BigInt

  "The block number at which the auction end function was called"
  finalizedAtBlockNumber: BigInt

}

